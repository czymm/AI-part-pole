import gym
import numpy as np
import random
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from collections import deque

# DQN Agent 类
class DQNAgent:
    def __init__(self, state_size, action_size):
        self.state_size = state_size
        self.action_size = action_size
        self.memory = deque(maxlen=2000)  # 记忆存储
        self.gamma = 0.95  # 折扣因子
        self.epsilon = 1.0  # 探索率
        self.epsilon_min = 0.01  # 最小探索率
        self.epsilon_decay = 0.995  # 探索率衰减
        self.learning_rate = 0.001  # 学习率
        self.model = self._build_model()  # 构建神经网络模型

    def _build_model(self):
        """构建神经网络模型"""
        model = Sequential()
        model.add(Dense(24, input_dim=self.state_size, activation='relu'))  # 输入层
        model.add(Dense(24, activation='relu'))  # 隐藏层
        model.add(Dense(self.action_size, activation='linear'))  # 输出层
        model.compile(loss='mse', optimizer=Adam(learning_rate=self.learning_rate))  # 编译模型
        return model

    def remember(self, state, action, reward, next_state, done):
        """存储经验到记忆库"""
        self.memory.append((state, action, reward, next_state, done))

    def act(self, state):
        """选择动作"""
        if np.random.rand() <= self.epsilon:  # 随机探索
            return random.randrange(self.action_size)
        act_values = self.model.predict(state, verbose=0)  # 根据模型预测动作
        return np.argmax(act_values[0])

    def replay(self, batch_size):
        """训练模型"""
        minibatch = random.sample(self.memory, batch_size)
        states = np.array([i[0] for i in minibatch])
        actions = np.array([i[1] for i in minibatch])
        rewards = np.array([i[2] for i in minibatch])
        next_states = np.array([i[3] for i in minibatch])
        dones = np.array([i[4] for i in minibatch])

        targets = rewards + self.gamma * (np.amax(self.model.predict(next_states, verbose=0), axis=1)) * (1 - dones)
        target_f = self.model.predict(states, verbose=0)
        for i, action in enumerate(actions):
            target_f[i][action] = targets[i]
        self.model.fit(states, target_f, epochs=1, verbose=0)  # 训练模型

        if self.epsilon > self.epsilon_min:  # 衰减探索率
            self.epsilon *= self.epsilon_decay

    def load(self, name):
        """加载模型权重"""
        self.model.load_weights(name)

    def save(self, name):
        """保存模型权重"""
        self.model.save_weights(name)


# 主程序
if __name__ == "__main__":
    env = gym.make('CartPole-v1')  # 创建CartPole环境
    state_size = env.observation_space.shape[0]  # 状态空间大小
    action_size = env.action_space.n  # 动作空间大小
    agent = DQNAgent(state_size, action_size)  # 初始化DQN Agent
    episodes = 500  # 训练的总回合数
    batch_size = 32  # 每次训练的批量大小

    for e in range(episodes):
        state = env.reset()  # 重置环境
        state = np.reshape(state, [1, state_size])  # 调整状态形状
        total_reward = 0
        for time in range(500):  # 每个回合的最大步数
            # env.render()  # 渲染环境（如果需要可视化）
            action = agent.act(state)  # 选择动作
            next_state, reward, done, _ = env.step(action)  # 执行动作
            total_reward += reward
            next_state = np.reshape(next_state, [1, state_size])  # 调整下一个状态的形状
            agent.remember(state, action, reward, next_state, done)  # 存储经验
            state = next_state  # 更新状态
            if done:  # 如果游戏结束
                print(f"episode: {e}/{episodes}, score: {time}, e: {agent.epsilon:.2}")
                break
        if len(agent.memory) > batch_size:  # 如果记忆库足够大，开始训练
            agent.replay(batch_size)

    # 保存模型
    agent.save("cartpole-dqn.h5")
    print("模型已保存为 cartpole-dqn.h5")

    # 测试训练好的模型
    agent.load("cartpole-dqn.h5")  # 加载模型
    state = env.reset()
    state = np.reshape(state, [1, state_size])
    total_reward = 0
    for _ in range(500):
        env.render()  # 渲染环境
        action = agent.act(state)  # 选择动作
        state, reward, done, _ = env.step(action)  # 执行动作
        total_reward += reward
        state = np.reshape(state, [1, state_size])
        if done:
            break
    print(f"测试回合总奖励: {total_reward}")
    env.close()